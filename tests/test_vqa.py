import numpy as np

from QHyper.solvers import solver_from_config

np.random.seed(1244)


def get_problem_config():
    problem_config = {
        "type": "knapsack",
        "max_weight": 2,
        "items": [(1, 2), (1, 2), (1, 1)]
    }

    params_config = {
        'angles': [[0.5]*3, [1]*3],
        'hyper_args': [1, 2.5, 2.5],
    }
    hyper_optimizer_bounds = 3*[(1, 10)]

    return problem_config, params_config, hyper_optimizer_bounds


def run_solver(solver_config):
    vqa = solver_from_config(solver_config)
    return vqa.solve(None)


def test_qaoa():
    problem_config, params_config, _ = get_problem_config()

    solver_config = {
        "solver": {
            "type": "vqa",
            "pqc": {
                "type": "qaoa",
                "layers": 3,
                "backend": "default.qubit",
            },
            "params_inits": params_config,
        },
        "problem": problem_config
    }

    solver_results = run_solver(solver_config)
    assert solver_results.results_probabilities == {
        '00000': 0.05214763286171284,
        '00001': 0.047456206684648256,
        '00010': 0.06747850816202812,
        '00011': 0.1207346328578372,
        '00100': 0.019935786631066668,
        '00101': 0.005007856642765267,
        '00110': 0.01005580974423947,
        '00111': 0.022499649875754597,
        '01000': 0.027125455378550354,
        '01001': 0.028211751547797856,
        '01010': 0.008350237539872896,
        '01011': 0.03202691762829461,
        '01100': 0.003062964564235747,
        '01101': 0.012204283239546117,
        '01110': 0.08663358863146411,
        '01111': 0.003494550808116975,
        '10000': 0.027125455378550347,
        '10001': 0.028211751547797856,
        '10010': 0.008350237539872908,
        '10011': 0.03202691762829463,
        '10100': 0.0030629645642357367,
        '10101': 0.012204283239546128,
        '10110': 0.08663358863146413,
        '10111': 0.0034945508081169743,
        '11000': 0.010496304111296366,
        '11001': 0.015135842196383593,
        '11010': 0.11572493713978199,
        '11011': 0.010027077049355402,
        '11100': 0.007232224863605771,
        '11101': 0.013160777387316473,
        '11110': 0.039326178047044726,
        '11111': 0.0413610770694037,
    }


def test_wfqaoa():
    problem_config, params_config, _ = get_problem_config()

    solver_config = {
        "solver": {
            "type": "vqa",
            "pqc": {
                "type": "wfqaoa",
                "layers": 3,
                "limit_results": 10,
                "penalty": 2,
                "backend": "default.qubit",
            },
            "params_inits": params_config,
        },
        "problem": problem_config
    }

    solver_results = run_solver(solver_config)
    assert solver_results.results_probabilities == {
        '00000': 0.05214763286171284,
        '00001': 0.047456206684648256,
        '00010': 0.06747850816202812,
        '00011': 0.1207346328578372,
        '00100': 0.019935786631066668,
        '00101': 0.005007856642765267,
        '00110': 0.01005580974423947,
        '00111': 0.022499649875754597,
        '01000': 0.027125455378550354,
        '01001': 0.028211751547797856,
        '01010': 0.008350237539872896,
        '01011': 0.03202691762829461,
        '01100': 0.003062964564235747,
        '01101': 0.012204283239546117,
        '01110': 0.08663358863146411,
        '01111': 0.003494550808116975,
        '10000': 0.027125455378550347,
        '10001': 0.028211751547797856,
        '10010': 0.008350237539872908,
        '10011': 0.03202691762829463,
        '10100': 0.0030629645642357367,
        '10101': 0.012204283239546128,
        '10110': 0.08663358863146413,
        '10111': 0.0034945508081169743,
        '11000': 0.010496304111296366,
        '11001': 0.015135842196383593,
        '11010': 0.11572493713978199,
        '11011': 0.010027077049355402,
        '11100': 0.007232224863605771,
        '11101': 0.013160777387316473,
        '11110': 0.039326178047044726,
        '11111': 0.0413610770694037,
    }


def test_hqaoa():
    problem_config, params_config, _ = get_problem_config()

    solver_config = {
        "solver": {
            "type": "vqa",
            "pqc": {
                "type": "hqaoa",
                "layers": 3,
                "limit_results": 10,
                "penalty": 2,
                "backend": "default.qubit",
            },
            "params_inits": params_config,
        },
        "problem": problem_config
    }

    solver_results = run_solver(solver_config)
    assert solver_results.results_probabilities == {
        '00000': 0.05214763286171284,
        '00001': 0.047456206684648256,
        '00010': 0.06747850816202812,
        '00011': 0.1207346328578372,
        '00100': 0.019935786631066668,
        '00101': 0.005007856642765267,
        '00110': 0.01005580974423947,
        '00111': 0.022499649875754597,
        '01000': 0.027125455378550354,
        '01001': 0.028211751547797856,
        '01010': 0.008350237539872896,
        '01011': 0.03202691762829461,
        '01100': 0.003062964564235747,
        '01101': 0.012204283239546117,
        '01110': 0.08663358863146411,
        '01111': 0.003494550808116975,
        '10000': 0.027125455378550347,
        '10001': 0.028211751547797856,
        '10010': 0.008350237539872908,
        '10011': 0.03202691762829463,
        '10100': 0.0030629645642357367,
        '10101': 0.012204283239546128,
        '10110': 0.08663358863146413,
        '10111': 0.0034945508081169743,
        '11000': 0.010496304111296366,
        '11001': 0.015135842196383593,
        '11010': 0.11572493713978199,
        '11011': 0.010027077049355402,
        '11100': 0.007232224863605771,
        '11101': 0.013160777387316473,
        '11110': 0.039326178047044726,
        '11111': 0.0413610770694037,
    }
